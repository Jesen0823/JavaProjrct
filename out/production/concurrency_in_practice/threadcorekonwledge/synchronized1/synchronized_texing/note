【一】Synchronized的特性:
一, 可重入性
指同一线程的外层函数获得锁之后内层函数可以直接再次获取该锁
好处：避免死锁，提升封装性
粒度：Synchronized的粒度是线程，而不是调用
关于粒度：
1）证明同一个方法是可重入的
2）证明可重入不一定非要求是同一个方法
3）证明可重入不一定非要在同一个类中

二, 不可中断性
Synchronized，一旦一个锁被其他线程获得了，如果我想获得只能选择等待或者阻塞，直到持有锁线程释放锁，如果它永远不释放，就只能永远等下去

相比之下Lock类的锁是拥有中断能力的，有权中断已持有锁的线程，也有权退出等待

【二】原理
一，加锁/释放锁的原理
1.获取和释放锁的时机：内置锁，由jvm管理
2.等价代码
3.深入JVM看字节码（反编译，monitor指令）：
java访问Synchronized代码块的时候，首先要获取锁，结束后要释放锁，而锁的信息存储在java对象的对象头里面，
JVM规范规定：
进入锁和释放锁是通过monitor来实现同步方法和同步代码块的。
monitor对象主要是monitorEnter指令会插入到同步代码块开始的位置，monitorExit会插入到同步代码块结束位置
当代码执行到monitorEnter指令位置时，会尝试获取monitor对象所有权，即对象的锁。
获得锁后monitor计数器会加1，如果重入了计数器会再加1；如果计数器是0表示可以尝试获取锁，否则就等待
monitorExit会将计数器减1.

反编译：目的是为看到monitor语句
反编译步骤：
1）cmd命令进入.java文件所在路径
2）javac xxx.java得到class文件
3）javap -verbose xxx.class读取反编译的信息
结果：
         5: astore_2
         6: monitorenter
         7: aload_2
         8: monitorexit
         9: goto          17
        12: astore_3
        13: aload_2
        14: monitorexit
        15: aload_3
        16: athrow
        17: return
2.可重入原理
加锁计数器
每个对象会自动持有一把锁，jvm负责跟踪该对象被加锁的次数，可重入情况下会继续加2，当任务离开会减1，0表示已经释放锁

3.可见性原理
Java内存模型JMM有关，为了加速程序运行速度，本地内存A和本地内存B相当于一个副本，把主内存中的对象复制到本地内存
两个线程通信大致过程：线程A把本地内存的变量写入主内存，线程B再在主内存读取已经更新了的变量
一旦被Synchronized标记，变量会在释放锁之前，都会从线程内存即本地内存写回到主内存。而主内存是共享的，这样就保证了可见性。

【三】Synchronized缺陷
1.效率低：锁的释放情况少，试图获得锁等待时不能设置超时时间，不能中断一个正在试图获取锁的线程
2.不够灵活：相比读写锁，加锁释放锁时机单一
3.无法知道是否成功获取到锁
而对比Lock类不具有以上缺点

二，可重入原理

三，可见性的原理