一，死锁
1.死锁发生的4个必然条件，缺一不可
1）互斥条件，不能同时被两个线程所持有
2）请求与保持条件，请求一个资源的时候，保持已有资源
3）不剥夺条件，没有外界干扰打断
4）循环等待条件

2.如何定位死锁
1）jstack命令
命令行执行jms或者执行jconsole就可以查到进行id，有了pid
再在jdk路径bin下，D:\Program Files\Java\jdk1.8.0_241\bin>
执行jstack [pid]
可以看到：
===================================================
"Thread-1":
        at threadcorekonwledge.deadlock.MustDeadLock1.run(MustDeadLock1.java:42)
        - waiting to lock <0x000000076bf267e8> (a java.lang.Object)
        - locked <0x000000076bf267f8> (a java.lang.Object)
        at java.lang.Thread.run(Thread.java:748)
"Thread-0":
        at threadcorekonwledge.deadlock.MustDeadLock1.run(MustDeadLock1.java:30)
        - waiting to lock <0x000000076bf267f8> (a java.lang.Object)
        - locked <0x000000076bf267e8> (a java.lang.Object)
        at java.lang.Thread.run(Thread.java:748)

Found 1 deadlock.

2）使用ThreadMXBean

3.如何修复死锁
1）避免策略
避免相反和获取锁的顺序
2）检测与恢复策略，一段时间检测释放有死锁，如果有就剥夺某一个资源来打开死锁
4.线上发生死锁：
保存堆栈信息，保存案发现场信息

5.实际生成中如何避免死锁
1)Lock的tryLock设置超时时间。如果获取不到锁可以打日志，重启等
synchronized不具备尝试获取锁的能力
2)优先选用并发类而不是自己设计锁
ConcurrentHashMap,ConcurrentLinkedQueue,AtomicBoolean
java.util.concurrent,atomic
3)尽量降低使用锁的使用粒度，用不同的锁
4）如果能使用同步代码块，就不适用同步方法，因为同步代码块可以自己指定锁对象
5）给线程起一个有意义的名字
6）避免锁的嵌套，不然容易死锁
7）专锁专用，不同的功能用不同的锁






4.哲学家就餐问题
流程：
先拿起左手筷子
再拿起右手筷子
如果筷子被别人用完了，就等待别人用完再用

死锁风险：每个人都拿起左边餐具，都在等右手餐具
四种解决方案：
1）服务员检查（避免策略）
2）改变一个哲学家拿筷子的顺序（避免策略）
3）餐票（避免策略）
4）领导调节（检测与恢复策略），外界剥夺条件，命令某一个线程释放锁

二，活锁
活锁和饥饿都是活跃性问题
线程虽然没有阻塞始终在运行，但是始终循环没有进展
解决活锁：加入随机因素
消息队列中如果处理失败，就放在队列开头重试，但是由于依赖业务服务异常，一直失败
那么可以把失败消息放在队列尾部，或者加入重试限制

三，饥饿
线程需要cpu资源但是一直分配不到或者其他资源或锁一直获取不到，则会出现饥饿

四，面试问题
1.必然死锁的案例
2.哪些情况容易产生死锁？
嵌套或者隐式显示地获取多个锁
3.如何定位死锁
jstack, ThreadMXBean
4.死锁的修复策略
JVM不会自动处理死锁
检测与恢复策略：每隔时间检测是否有死锁，有就剥夺某个资源或者人为干扰，来打开死锁
5.实际工作中如何避免死锁？
1)使用超时时间比如tryLock
2)多使用并发类而不是自己设计锁
3)尽量降低锁的粒度，不同功能用不同的锁
4)如果能用同步代码块就不要用方法同步，自己指定锁对象避免策略：哲学家就餐换手，银行转账换序改变获取锁的顺序

5)给线程起名字
6)避免锁的嵌套
6.活跃性问题，死锁活锁和饥饿有什么区别

