1.为什么wait(),notify(),notifyAll()定义在Object类里面，sleep()定义在Thread里
2.用3种方式实现生产者消费者
3.join,sleep,wait对应的线程状态是什么

一，wait(),notify(),notifyAll()
作用：控制线程的休眠和唤醒
特点性质：
1.三个方法必须在Synchronized中执行
2.必须先拥有monitor
3.只能唤醒其中一个线程
4.都属于Object的方法
5.就应用层面来说都比较底层，已经有封装了类似功能的Condition
6.同时持有多个锁的情况，优先释放对象持有的
1.阻塞阶段
调用wait之后线程进入阻塞，执行wait之前必须先拥有moniter锁
2.唤醒阶段(jvm会随机选择一个线程唤醒)
1）另一个线程调用notify且刚好被唤醒的是本线程，本线程进入唤醒阶段
2）另一个线程调用notifyAll
3)如果阻塞时调用的是wait(long timeout)且过了超时时间，会自动唤醒，如果timeout传入的是0会永久等待
4）线程自身调用了interrupt()

哪个对象调用了wait(),这个对象的monitor锁被锁住，而不影响其他对象

3.遇到中断

二，sleep()方法
让线程在预期的时间执行，线程进入Waiting状态，其他时候不要占用cpu资源
特点：
1.不释放锁，和wait()不同
2.遇到中断，会响应中断抛出InterruptException,并清除中断状态

三，join()方法
新的线程加入到了当前线程，当前线程会等待新线程执行到达，再一起继续向下执行
join调用，状态进入WAITing
工作实践中主要使用CountDownLatch或CyclicBarrier工具类
join的源码中也是调用了wait(delay),delay如果是0 会一直等待
而线程的自动唤醒是jvm唤醒的，native层代码中会调用ensure_join,而ensure_join中会调用notify_all(thread)

四，yeild()方法
线程会释放目前的cpu时间片，但不释放锁，下次线程调度很可能会再次调度该线程，具体实现逻辑不同JVM不一样
与sleep的区别：释放可能再次被调度

五，面试问题
1.为什么wait()要在同步代码块使用，而sleep()不需要？
因为wait()是为了让其他线程获取到锁，如果没有同步代码块保护，其他线程也会调用wait()唤醒之前线程，效率不高
而sleep是属于Thread类的，本身就是当前线程进入睡眠，所以不需要代码块保护。

2.为什么wait(),notify(),notifyAll()定义在Object类里面，sleep()定义在Thread里？
因为，这几个方法是锁级别的操作，属于锁对象的，锁是绑定在对象的对象头的。如果定义在thread中会很局限
因为经常的情况是一个线程可以拥有多个锁，而锁之间是相互配合的。

3.Thread也属于Object，调用Thread.wait()会如何？
理论上是可以把thread当作锁对象，但是Thread在退出的时候会主动notify(),会干扰业务逻辑，不推荐使用

4.如何选择用notify还是notifyAll?
取决于是要唤醒某个线程还是唤醒所有其他线程

5.notifyAll调用后所有线程都会竞争枪锁，如果某线程枪锁失败会怎样？
如果抢锁失败，会陷入等待，等待线程调度器的调度和下一轮枪锁。

6.用suspend和resume来阻塞线程行不行?
suspend resume由于安全问题被启用了，应使用wait和notify

7.wait/notify,sleep异同？
相同点：都会陷入阻塞，都响应中断
不同：
1)前两者要在Synchronized代码块执行
2)前两者会释放锁，sleep不释放锁
3）后者需要传参指定时间
4）前两者是Object，后者是Thread的方法

